{
  
    
        "post0": {
            "title": "Drug Discovery Project",
            "content": "DATASETS: . (a) Carbonic Anhydrase II (ChEMBL205), a protein lyase, (b) Cyclin-dependent kinase 2 (CHEMBL301), a protein kinase, (c) ether-a-go-go-related gene potassium channel 1 (HERG) (CHEMBL240), a voltage-gated ion channel, (d) Dopamine D4 receptor (CHEMBL219), a monoamine GPCR, (e) Coagulation factor X (CHEMBL244), a serine protease, (f) Cannabinoid CB1 receptor (CHEMBL218), a lipid-like GPCR and (g) Cytochrome P450 19A1 (CHEMBL1978), a cytochrome P450. The activity classes were selected based on data availability and as representatives of therapeutically important target classes or as anti-targets. . import pandas as pd import numpy as np from pathlib import Path . from rdkit import Chem from rdkit.Chem import AllChem . path = Path(&#39;../dataset/13321_2017_226_MOESM1_ESM/&#39;) #df = pd.read_csv(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL205_cl.csv&#39;, index_col=0) . list(path.iterdir()) . [PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/RdkitDescriptors.py&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL205_cl_ecfp_1024.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL218_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL205_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL1978_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL244_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL240_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL301_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL219_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/chembl205-data-with-ecfp-activations.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/.ipynb_checkpoints&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/mol_images&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL218_cl_ecfp_1024.csv&#39;)] . RdkitDescriptors . def fp(smile, diam = 2, bits = 1024): mol = Chem.MolFromSmiles(smile) Chem.SanitizeMol(mol) fp = AllChem.GetMorganFingerprintAsBitVect(mol, diam, nBits = bits) return fp . #Generated Circular fingerprints hashed into n bits length vectors. def ECFP(ifile, ofile, diam, bits): print(f&quot;Making fingerprints for file: {ifile}&quot;) df = pd.read_csv(ifile) df.insert(2, &quot;ECFP4_&quot;, df.SMILES.apply(fp)) df[[f&quot;ECFP4_{i+1}&quot; for i in range(len(df.ECFP4_[0]))]] = df.ECFP4_.to_list() df.drop(&quot;ECFP4_&quot;, axis = 1, inplace = True) df.to_csv(path/ofile, index = None) return df . Run the functions on a file from dataset and store the results . dataset=&#39;CHEMBL205_cl&#39; . . Making fingerprints for file: ../dataset/13321_2017_226_MOESM1_ESM/CHEMBL218_cl.csv . CID SMILES Activity ECFP4_1 ECFP4_2 ECFP4_3 ECFP4_4 ECFP4_5 ECFP4_6 ECFP4_7 ... ECFP4_1015 ECFP4_1016 ECFP4_1017 ECFP4_1018 ECFP4_1019 ECFP4_1020 ECFP4_1021 ECFP4_1022 ECFP4_1023 ECFP4_1024 . 0 CHEMBL494207 | CNC(=O)[C@@H](NC(=O)N1C(=O)N(CCN2CCOCC2)c3cccc... | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 1 CHEMBL2180226 | CC(C)(C)OC(=O)N1CCC(CC1)Nc2ncnc3c2nc(c4ccccc4C... | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | . 2 CHEMBL2180223 | CCCCNC(=O)NC1(CCN(CC1)c2ncnc3c2nc(c4ccccc4Cl)n... | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 3 CHEMBL2180222 | CCCNC(=O)NC1(CCN(CC1)c2ncnc3c2nc(c4ccccc4Cl)n3... | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 4 CHEMBL2180221 | CC(C)NC(=O)NC1(CCN(CC1)c2ncnc3c2nc(c4ccccc4Cl)... | 1 | 0 | 1 | 0 | 0 | 1 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 20919 CHEMBL444795 | Clc1cc(ccc1Cl)COc1ccc(cc1) C=C C(N1OC(=O)[N-]C... | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 20920 CHEMBL36045 | Brc1ccccc1CC(CCCCn1c2NC=[NH+]CC(O)c2nc1)C(=O)[O-] | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | . 20921 CHEMBL565432 | o1nc(nc1-c1ccncc1)-c1ccc(nc1OC)-c1ccccc1 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 20922 CHEMBL334224 | Oc1ccc(N2N=C3N(c4c(N=C3N)c([N+](=O)[O-])ccc4)C... | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 20923 CHEMBL434418 | S(=O)(CCCCCCn1nc(cc1C)C)c1[nH]c(c(n1)-c1ccccc1... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | . 20924 rows × 1027 columns . df = pd.read_csv(path/f&#39;{dataset}_ecfp_1024.csv&#39;) . df.head() . CID SMILES Activity ECFP4_1 ECFP4_2 ECFP4_3 ECFP4_4 ECFP4_5 ECFP4_6 ECFP4_7 ... ECFP4_1015 ECFP4_1016 ECFP4_1017 ECFP4_1018 ECFP4_1019 ECFP4_1020 ECFP4_1021 ECFP4_1022 ECFP4_1023 ECFP4_1024 . 0 CHEMBL188002 | S(=O)(=O)(N)c1cc(N/C(/S)=N c2cc(C(=O)[O-])c(cc... | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 1 CHEMBL364127 | Clc1ccc(cc1)C(=O)NC1Cc2cc(S(=O)(=O)N)ccc2C1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | . 2 CHEMBL1683469 | S(=O)(=O)(N)c1ccc(cc1)CNS(=O)(=O)CC12CCC(CC1=O... | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | . 3 CHEMBL52564 | Oc1ccccc1 C=C C(=O)[O-] | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 4 CHEMBL21427 | OB(O)c1ccc(OC)cc1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 5 rows × 1027 columns . Split data . X, y = df.drop([&quot;CID&quot;, &quot;SMILES&quot;, &quot;Activity&quot;], axis=1), df[&quot;Activity&quot;] . X.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 17941 entries, 0 to 17940 Columns: 1024 entries, ECFP4_1 to ECFP4_1024 dtypes: int64(1024) memory usage: 140.2 MB . y.head(), y.size, type(y) . (0 1 1 1 2 1 3 1 4 1 Name: Activity, dtype: int64, 17941, pandas.core.series.Series) . Train test split . from sklearn.model_selection import train_test_split, KFold . X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=666) . 5-Fold Cross Validation . kf = KFold(n_splits=5, shuffle=True, random_state=999) . X_train_list, X_valid_list, y_train_list, y_valid_list = [], [], [], [] for train_index, valid_index in kf.split(X_train): X_train_list.append(X_train.iloc[train_index]) X_valid_list.append(X_train.iloc[valid_index]) y_train_list.append(y_train.iloc[train_index]) y_valid_list.append(y_train.iloc[valid_index]) . y_train_list[0].head() . 14960 0 16280 0 16068 0 13692 0 14043 0 Name: Activity, dtype: int64 . X_train_list[1].info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 8611 entries, 14960 to 10114 Columns: 1024 entries, ECFP4_1 to ECFP4_1024 dtypes: int64(1024) memory usage: 67.3 MB . . Random Forest . from sklearn.ensemble import RandomForestClassifier . from sklearn.metrics import auc,roc_auc_score,recall_score,precision_score,f1_score from sklearn.metrics import matthews_corrcoef from sklearn.metrics import accuracy_score . def train_rf(X_train, X_test, y_train, y_test, n_estimators=5, criterion=&#39;gini&#39;, max_features=&#39;log2&#39;): rf = RandomForestClassifier(n_estimators=n_estimators, criterion=criterion, min_samples_split=2, max_features=max_features, max_leaf_nodes=None,bootstrap=False,oob_score=False, n_jobs=-1, random_state=69) rf.fit(X_train,y_train) y_pred= rf.predict(X_test) y_pred_prob=rf.predict_proba(X_test) temp=[] for j in range(len(y_pred_prob)): temp.append(y_pred_prob[j][1]) auc=roc_auc_score(np.array(y_test),np.array(temp)) acc2=accuracy_score(y_test,y_pred) mcc=matthews_corrcoef(y_test,y_pred) Recall=recall_score(y_test, y_pred,pos_label=1) Precision=precision_score(y_test, y_pred,pos_label=1) F1_score=f1_score(y_test, y_pred,pos_label=1) return auc,acc2,mcc,Recall,Precision,F1_score . # Train and print scores for each split for i in range(0,5): print(f&#39;Cross validation iteration: {i + 1}&#39;) X_train = X_train_list[i] X_valid = X_valid_list[i] y_train = y_train_list[i] y_valid = y_valid_list[i] auc,acc2,mcc,Recall,Precision,F1_score = train_rf(X_train, X_valid, y_train, y_valid, n_estimators=100, criterion=&#39;entropy&#39;, max_features=&#39;sqrt&#39;) print(f&#39;AUC score:{auc}&#39;) print(f&#39;Accuracy: {acc2}&#39;) print(f&#39;Matthews: {mcc}&#39;) print(f&#39;Recall: {Recall}&#39;) print(f&#39;Precision: {Precision}&#39;) print(f&#39;F1 score: {F1_score}&#39;) print() . Cross validation iteration: 1 AUC score:0.9887427620260744 Accuracy: 0.9730608453320948 Matthews: 0.8415714713449818 Recall: 0.8564356435643564 Precision: 0.8564356435643564 F1 score: 0.8564356435643564 Cross validation iteration: 2 AUC score:0.9876712143359863 Accuracy: 0.9781699953553181 Matthews: 0.8608807076715227 Recall: 0.8563829787234043 Precision: 0.8895027624309392 F1 score: 0.8726287262872627 Cross validation iteration: 3 AUC score:0.9909322903664254 Accuracy: 0.9712029725963771 Matthews: 0.8122047591950275 Recall: 0.8142076502732241 Precision: 0.8418079096045198 F1 score: 0.8277777777777778 Cross validation iteration: 4 AUC score:0.9754214676396435 Accuracy: 0.9693450998606595 Matthews: 0.8300350847464447 Recall: 0.7964601769911505 Precision: 0.9 F1 score: 0.8450704225352113 Cross validation iteration: 5 AUC score:0.9912994366040052 Accuracy: 0.9753717472118959 Matthews: 0.8390326671715927 Recall: 0.8406593406593407 Precision: 0.864406779661017 F1 score: 0.8523676880222841 .",
            "url": "https://drug-discovery.github.io/Drug-Discovery-blog/2021/04/24/DD-blogpost.html",
            "relUrl": "/2021/04/24/DD-blogpost.html",
            "date": " • Apr 24, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://drug-discovery.github.io/Drug-Discovery-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://drug-discovery.github.io/Drug-Discovery-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://drug-discovery.github.io/Drug-Discovery-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://drug-discovery.github.io/Drug-Discovery-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}
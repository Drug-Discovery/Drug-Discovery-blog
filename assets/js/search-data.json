{
  
    
        "post0": {
            "title": "Drug Discovery Project",
            "content": "Backround . The development of new drugs takes between 15-20 years of development and costs an average of 4 billion US dollars. Modern drug discovery and development usually follows a set of systematic procedures. Modern drug discovery and drug development usually follows a set of systematic procedures, often starting with a validated biomolecular target for which one tries to find a modulator (i.e. a drug). For many years machine learning has played a role in drug discovery. In recent years modern machine learning techniques have been applied to all stages, from initial target discovery and compound screening to the analysis of pathology data during clinical development. . . Figure 1: | . In this project we will focus on early stages of this development, more specifically the target selection as you can see from Figure 1. . DATASETS: . (a) Carbonic Anhydrase II (ChEMBL205), a protein lyase, (b) Cyclin-dependent kinase 2 (CHEMBL301), a protein kinase, (c) ether-a-go-go-related gene potassium channel 1 (HERG) (CHEMBL240), a voltage-gated ion channel, (d) Dopamine D4 receptor (CHEMBL219), a monoamine GPCR, (e) Coagulation factor X (CHEMBL244), a serine protease, (f) Cannabinoid CB1 receptor (CHEMBL218), a lipid-like GPCR and (g) Cytochrome P450 19A1 (CHEMBL1978), a cytochrome P450. The activity classes were selected based on data availability and as representatives of therapeutically important target classes or as anti-targets. . path = Path(&#39;../dataset/13321_2017_226_MOESM1_ESM/&#39;) #df = pd.read_csv(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL205_cl.csv&#39;, index_col=0) . list(path.iterdir()) . [PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/RdkitDescriptors.py&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL205_cl_ecfp_1024.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL218_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL205_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL1978_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL244_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL240_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL301_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL219_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/chembl205-data-with-ecfp-activations.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/.ipynb_checkpoints&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/mol_images&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL218_cl_ecfp_1024.csv&#39;)] . RdkitDescriptors . def fp(smile, diam = 2, bits = 1024): mol = Chem.MolFromSmiles(smile) Chem.SanitizeMol(mol) fp = AllChem.GetMorganFingerprintAsBitVect(mol, diam, nBits = bits) return fp . #Generated Circular fingerprints hashed into n bits length vectors. def ECFP(ifile, ofile, diam, bits): print(f&quot;Making fingerprints for file: {ifile}&quot;) df = pd.read_csv(ifile) df.insert(2, &quot;ECFP4_&quot;, df.SMILES.apply(fp)) df[[f&quot;ECFP4_{i+1}&quot; for i in range(len(df.ECFP4_[0]))]] = df.ECFP4_.to_list() df.drop(&quot;ECFP4_&quot;, axis = 1, inplace = True) df.to_csv(path/ofile, index = None) return df . Run the functions on a file from dataset and store the results . dataset=&#39;CHEMBL205_cl&#39; . . Making fingerprints for file: ../dataset/13321_2017_226_MOESM1_ESM/CHEMBL218_cl.csv . CID SMILES Activity ECFP4_1 ECFP4_2 ECFP4_3 ECFP4_4 ECFP4_5 ECFP4_6 ECFP4_7 ... ECFP4_1015 ECFP4_1016 ECFP4_1017 ECFP4_1018 ECFP4_1019 ECFP4_1020 ECFP4_1021 ECFP4_1022 ECFP4_1023 ECFP4_1024 . 0 CHEMBL494207 | CNC(=O)[C@@H](NC(=O)N1C(=O)N(CCN2CCOCC2)c3cccc... | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 1 CHEMBL2180226 | CC(C)(C)OC(=O)N1CCC(CC1)Nc2ncnc3c2nc(c4ccccc4C... | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | . 2 CHEMBL2180223 | CCCCNC(=O)NC1(CCN(CC1)c2ncnc3c2nc(c4ccccc4Cl)n... | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 3 CHEMBL2180222 | CCCNC(=O)NC1(CCN(CC1)c2ncnc3c2nc(c4ccccc4Cl)n3... | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 4 CHEMBL2180221 | CC(C)NC(=O)NC1(CCN(CC1)c2ncnc3c2nc(c4ccccc4Cl)... | 1 | 0 | 1 | 0 | 0 | 1 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 20919 CHEMBL444795 | Clc1cc(ccc1Cl)COc1ccc(cc1) C=C C(N1OC(=O)[N-]C... | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 20920 CHEMBL36045 | Brc1ccccc1CC(CCCCn1c2NC=[NH+]CC(O)c2nc1)C(=O)[O-] | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | . 20921 CHEMBL565432 | o1nc(nc1-c1ccncc1)-c1ccc(nc1OC)-c1ccccc1 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 20922 CHEMBL334224 | Oc1ccc(N2N=C3N(c4c(N=C3N)c([N+](=O)[O-])ccc4)C... | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 20923 CHEMBL434418 | S(=O)(CCCCCCn1nc(cc1C)C)c1[nH]c(c(n1)-c1ccccc1... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | . 20924 rows × 1027 columns . df = pd.read_csv(path/f&#39;{dataset}_ecfp_1024.csv&#39;) . df.head() . CID SMILES Activity ECFP4_1 ECFP4_2 ECFP4_3 ECFP4_4 ECFP4_5 ECFP4_6 ECFP4_7 ... ECFP4_1015 ECFP4_1016 ECFP4_1017 ECFP4_1018 ECFP4_1019 ECFP4_1020 ECFP4_1021 ECFP4_1022 ECFP4_1023 ECFP4_1024 . 0 CHEMBL188002 | S(=O)(=O)(N)c1cc(N/C(/S)=N c2cc(C(=O)[O-])c(cc... | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 1 CHEMBL364127 | Clc1ccc(cc1)C(=O)NC1Cc2cc(S(=O)(=O)N)ccc2C1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | . 2 CHEMBL1683469 | S(=O)(=O)(N)c1ccc(cc1)CNS(=O)(=O)CC12CCC(CC1=O... | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | . 3 CHEMBL52564 | Oc1ccccc1 C=C C(=O)[O-] | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 4 CHEMBL21427 | OB(O)c1ccc(OC)cc1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 5 rows × 1027 columns . Split data . X, y = df.drop([&quot;CID&quot;, &quot;SMILES&quot;, &quot;Activity&quot;], axis=1), df[&quot;Activity&quot;] . X.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 17941 entries, 0 to 17940 Columns: 1024 entries, ECFP4_1 to ECFP4_1024 dtypes: int64(1024) memory usage: 140.2 MB . y.head(), y.size, type(y) . (0 1 1 1 2 1 3 1 4 1 Name: Activity, dtype: int64, 17941, pandas.core.series.Series) . Train test split . from sklearn.model_selection import train_test_split, KFold . X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=666) . 5-Fold Cross Validation . kf = KFold(n_splits=5, shuffle=True, random_state=999) . X_train_list, X_valid_list, y_train_list, y_valid_list = [], [], [], [] for train_index, valid_index in kf.split(X_train): X_train_list.append(X_train.iloc[train_index]) X_valid_list.append(X_train.iloc[valid_index]) y_train_list.append(y_train.iloc[train_index]) y_valid_list.append(y_train.iloc[valid_index]) . y_train_list[0].head() . 14960 0 16280 0 16068 0 13692 0 14043 0 Name: Activity, dtype: int64 . X_train_list[1].info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 8611 entries, 14960 to 10114 Columns: 1024 entries, ECFP4_1 to ECFP4_1024 dtypes: int64(1024) memory usage: 67.3 MB . . Random Forest . from sklearn.ensemble import RandomForestClassifier . from sklearn.metrics import auc,roc_auc_score,recall_score,precision_score,f1_score from sklearn.metrics import matthews_corrcoef from sklearn.metrics import accuracy_score . def train_rf(X_train, X_test, y_train, y_test, n_estimators=5, criterion=&#39;gini&#39;, max_features=&#39;log2&#39;): rf = RandomForestClassifier(n_estimators=n_estimators, criterion=criterion, min_samples_split=2, max_features=max_features, max_leaf_nodes=None,bootstrap=False,oob_score=False, n_jobs=-1, random_state=69) rf.fit(X_train,y_train) y_pred= rf.predict(X_test) y_pred_prob=rf.predict_proba(X_test) temp=[] for j in range(len(y_pred_prob)): temp.append(y_pred_prob[j][1]) auc=roc_auc_score(np.array(y_test),np.array(temp)) acc2=accuracy_score(y_test,y_pred) mcc=matthews_corrcoef(y_test,y_pred) Recall=recall_score(y_test, y_pred,pos_label=1) Precision=precision_score(y_test, y_pred,pos_label=1) F1_score=f1_score(y_test, y_pred,pos_label=1) return auc,acc2,mcc,Recall,Precision,F1_score . # Train and print scores for each split for i in range(0,5): print(f&#39;Cross validation iteration: {i + 1}&#39;) X_train = X_train_list[i] X_valid = X_valid_list[i] y_train = y_train_list[i] y_valid = y_valid_list[i] auc,acc2,mcc,Recall,Precision,F1_score = train_rf(X_train, X_valid, y_train, y_valid, n_estimators=100, criterion=&#39;entropy&#39;, max_features=&#39;sqrt&#39;) print(f&#39;AUC score:{auc}&#39;) print(f&#39;Accuracy: {acc2}&#39;) print(f&#39;Matthews: {mcc}&#39;) print(f&#39;Recall: {Recall}&#39;) print(f&#39;Precision: {Precision}&#39;) print(f&#39;F1 score: {F1_score}&#39;) print() . Cross validation iteration: 1 AUC score:0.9887427620260744 Accuracy: 0.9730608453320948 Matthews: 0.8415714713449818 Recall: 0.8564356435643564 Precision: 0.8564356435643564 F1 score: 0.8564356435643564 Cross validation iteration: 2 AUC score:0.9876712143359863 Accuracy: 0.9781699953553181 Matthews: 0.8608807076715227 Recall: 0.8563829787234043 Precision: 0.8895027624309392 F1 score: 0.8726287262872627 Cross validation iteration: 3 AUC score:0.9909322903664254 Accuracy: 0.9712029725963771 Matthews: 0.8122047591950275 Recall: 0.8142076502732241 Precision: 0.8418079096045198 F1 score: 0.8277777777777778 Cross validation iteration: 4 AUC score:0.9754214676396435 Accuracy: 0.9693450998606595 Matthews: 0.8300350847464447 Recall: 0.7964601769911505 Precision: 0.9 F1 score: 0.8450704225352113 Cross validation iteration: 5 AUC score:0.9912994366040052 Accuracy: 0.9753717472118959 Matthews: 0.8390326671715927 Recall: 0.8406593406593407 Precision: 0.864406779661017 F1 score: 0.8523676880222841 .",
            "url": "https://drug-discovery.github.io/Drug-Discovery-blog/2021/04/24/DD-blogpost.html",
            "relUrl": "/2021/04/24/DD-blogpost.html",
            "date": " • Apr 24, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://drug-discovery.github.io/Drug-Discovery-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://drug-discovery.github.io/Drug-Discovery-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}
{
  
    
        "post0": {
            "title": "4 - RF model with activations",
            "content": "DATASETS: . (a) Carbonic Anhydrase II (ChEMBL205), a protein lyase, (b) Cyclin-dependent kinase 2 (CHEMBL301), a protein kinase, (c) ether-a-go-go-related gene potassium channel 1 (HERG) (CHEMBL240), a voltage-gated ion channel, (d) Dopamine D4 receptor (CHEMBL219), a monoamine GPCR, (e) Coagulation factor X (CHEMBL244), a serine protease, (f) Cannabinoid CB1 receptor (CHEMBL218), a lipid-like GPCR and (g) Cytochrome P450 19A1 (CHEMBL1978), a cytochrome P450. The activity classes were selected based on data availability and as representatives of therapeutically important target classes or as anti-targets. . top_mcc_scores = { &#39;CHEMBL205&#39;: 0.862, &#39;CHEMBL301&#39;: 0.926, &#39;CHEMBL240&#39;: 0.884, &#39;CHEMBL219&#39;: 0.887, &#39;CHEMBL244&#39;: 0.983, &#39;CHEMBL218&#39;: 0.941, &#39;CHEMBL1978&#39;: 0.904} . import pandas as pd import numpy as np from pathlib import Path . path = Path(&#39;../dataset/13321_2017_226_MOESM1_ESM/&#39;) #df = pd.read_csv(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL205_cl.csv&#39;, index_col=0) . list(path.iterdir()) . [PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/RdkitDescriptors.py&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL205_cl_ecfp_1024.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL218_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL205_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL1978_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL244_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL240_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL301_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL219_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/chembl205-data-with-ecfp-activations.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/.ipynb_checkpoints&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/mol_images&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL218_cl_ecfp_1024.csv&#39;)] . Run the functions on a file from dataset and store the results . dataset=&#39;chembl205&#39; . df = pd.read_csv(path/f&#39;{dataset}-data-with-ecfp-activations.csv&#39;) . df.head() . CID SMILES Activity ECFP4_1 ECFP4_2 ECFP4_3 ECFP4_4 ECFP4_5 ECFP4_6 ECFP4_7 ... act_502 act_503 act_504 act_505 act_506 act_507 act_508 act_509 act_510 act_511 . 0 CHEMBL188002 | S(=O)(=O)(N)c1cc(N/C(/S)=N c2cc(C(=O)[O-])c(cc... | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | -20.266380 | -58.616051 | -36.874432 | -84.006630 | -28.130043 | -14.237524 | -30.243919 | -89.924866 | -25.477444 | -13.185804 | . 1 CHEMBL364127 | Clc1ccc(cc1)C(=O)NC1Cc2cc(S(=O)(=O)N)ccc2C1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | -27.719458 | -79.247879 | -71.388512 | -117.074829 | -87.031128 | -25.362850 | -91.691391 | -97.514877 | -159.834167 | 37.859943 | . 2 CHEMBL1683469 | S(=O)(=O)(N)c1ccc(cc1)CNS(=O)(=O)CC12CCC(CC1=O... | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | -27.371447 | -91.037331 | -82.402603 | -140.058167 | -110.499306 | -35.576706 | -118.137932 | -114.797058 | -210.545105 | 58.341396 | . 3 CHEMBL52564 | Oc1ccccc1 C=C C(=O)[O-] | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | -12.962411 | -65.378036 | -52.445572 | -105.202003 | -54.042187 | -23.038553 | -45.937416 | -107.758331 | -74.264862 | 15.236348 | . 4 CHEMBL21427 | OB(O)c1ccc(OC)cc1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | -14.881062 | -61.484863 | -52.275417 | -100.329498 | -55.440769 | -24.665730 | -48.966393 | -98.103355 | -83.055305 | 20.628500 | . 5 rows × 1541 columns . Train test split . from sklearn.model_selection import train_test_split, KFold . df.is_valid.value_counts() . False 13455 True 4486 Name: is_valid, dtype: int64 . train = df.loc[df.is_valid==False] test = df.loc[df.is_valid==True] . train.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 13455 entries, 1 to 17940 Columns: 1541 entries, CID to act_511 dtypes: bool(1), float64(512), int64(1025), object(3) memory usage: 158.2+ MB . X_train, y_train = train.drop([&quot;CID&quot;, &quot;SMILES&quot;, &quot;Activity&quot;, &quot;Image&quot;], axis=1), train[&quot;Activity&quot;] X_test, y_test = test.drop([&quot;CID&quot;, &quot;SMILES&quot;, &quot;Activity&quot;, &quot;Image&quot;], axis=1), test[&quot;Activity&quot;] . y_test.count() . 4486 . y_train.count(), X_train.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 10764 entries, 1 to 17938 Columns: 1537 entries, ECFP4_1 to act_511 dtypes: bool(1), float64(512), int64(1024) memory usage: 126.2 MB . (10764, None) . Random Forest . from sklearn.ensemble import RandomForestClassifier . from sklearn.metrics import auc,roc_auc_score,recall_score,precision_score,f1_score from sklearn.metrics import matthews_corrcoef from sklearn.metrics import accuracy_score . def train_rf(X_train, X_test, y_train, y_test, n_estimators=5, criterion=&#39;gini&#39;, max_features=&#39;log2&#39;): rf = RandomForestClassifier(n_estimators=n_estimators, criterion=criterion, min_samples_split=2, max_features=max_features, max_leaf_nodes=None,bootstrap=False,oob_score=False, n_jobs=-1, random_state=69) rf.fit(X_train,y_train) y_pred= rf.predict(X_test) y_pred_prob=rf.predict_proba(X_test) temp=[] for j in range(len(y_pred_prob)): temp.append(y_pred_prob[j][1]) auc=roc_auc_score(np.array(y_test),np.array(temp)) acc2=accuracy_score(y_test,y_pred) mcc=matthews_corrcoef(y_test,y_pred) Recall=recall_score(y_test, y_pred,pos_label=1) Precision=precision_score(y_test, y_pred,pos_label=1) F1_score=f1_score(y_test, y_pred,pos_label=1) return auc,acc2,mcc,Recall,Precision,F1_score . auc,acc2,mcc,Recall,Precision,F1_score, _ = train_rf(X_train, X_test, y_train, y_test, n_estimators=100, criterion=&#39;entropy&#39;, max_features=&#39;sqrt&#39;, features=&#39;act_&#39;) print(f&#39;AUC score:{auc}&#39;) print(f&#39;Accuracy: {acc2}&#39;) print(f&#39;Matthews: {mcc}&#39;) print(f&#39;Recall: {Recall}&#39;) print(f&#39;Precision: {Precision}&#39;) print(f&#39;F1 score: {F1_score}&#39;) print() . Training on 512 feature AUC score:0.9529763965419419 Accuracy: 0.9701292911279537 Matthews: 0.8166717881926069 Recall: 0.8186274509803921 Precision: 0.8477157360406091 F1 score: 0.8329177057356608 . Train RF with settings grid from paper . from sklearn.model_selection import ParameterGrid . param_grid = { &#39;n_estimators&#39;: [10,50,100,200,300,700], &#39;criterion&#39;: [&#39;gini&#39;, &#39;entropy&#39;], &#39;max_features&#39;: [&#39;log2&#39;, &#39;sqrt&#39;]} param_grid = ParameterGrid(param_grid) . for setting in param_grid: print(f&quot;Testing combination: {setting}&quot;) # Crossval using split from earlier aucs, accs, mccs, recalls, precs, f1_scores = [], [], [], [], [], [] auc,acc2,mcc,recall,precision,F1_score, _ = train_rf(X_train, X_test, y_train, y_test, n_estimators=setting[&#39;n_estimators&#39;], criterion=setting[&#39;criterion&#39;], max_features=setting[&#39;max_features&#39;]) aucs.append(auc) accs.append(acc2) mccs.append(mcc) recalls.append(recall) precs.append(precision) f1_scores.append(F1_score) print(f&quot;Average ROCAUC of the folds: {np.mean(aucs)}&quot;) print(f&quot;Average accuracy of the folds: {np.mean(accs)}&quot;) print(f&quot;Average Matthews correlation of the folds: {np.mean(mccs)}&quot;) print(f&quot;Average recall of the folds: {np.mean(recalls)}&quot;) print(f&quot;Average precision of the folds: {np.mean(precs)}&quot;) print(f&quot;Average f1 score of the folds: {np.mean(f1_scores)}&quot;) print() . Testing combination: {&#39;criterion&#39;: &#39;gini&#39;, &#39;max_features&#39;: &#39;log2&#39;, &#39;n_estimators&#39;: 10} Training on 1024 feature Average ROCAUC of the folds: 0.969287316446932 Average accuracy of the folds: 0.9654480606330806 Average Matthews correlation of the folds: 0.7758973576847494 Average recall of the folds: 0.7083333333333334 Average precision of the folds: 0.8892307692307693 Average f1 score of the folds: 0.7885402455661664 Testing combination: {&#39;criterion&#39;: &#39;gini&#39;, &#39;max_features&#39;: &#39;log2&#39;, &#39;n_estimators&#39;: 50} Training on 1024 feature Average ROCAUC of the folds: 0.9824122022521613 Average accuracy of the folds: 0.9707980383415069 Average Matthews correlation of the folds: 0.8138302537014964 Average recall of the folds: 0.7647058823529411 Average precision of the folds: 0.899135446685879 Average f1 score of the folds: 0.8264900662251655 Testing combination: {&#39;criterion&#39;: &#39;gini&#39;, &#39;max_features&#39;: &#39;log2&#39;, &#39;n_estimators&#39;: 100} Training on 1024 feature Average ROCAUC of the folds: 0.9849031508140285 Average accuracy of the folds: 0.9707980383415069 Average Matthews correlation of the folds: 0.8145363334143343 Average recall of the folds: 0.7720588235294118 Average precision of the folds: 0.8923512747875354 Average f1 score of the folds: 0.8278580814717477 Testing combination: {&#39;criterion&#39;: &#39;gini&#39;, &#39;max_features&#39;: &#39;log2&#39;, &#39;n_estimators&#39;: 200} Training on 1024 feature Average ROCAUC of the folds: 0.9869180874900229 Average accuracy of the folds: 0.9716897012929113 Average Matthews correlation of the folds: 0.8207683870383751 Average recall of the folds: 0.7818627450980392 Average precision of the folds: 0.8935574229691877 Average f1 score of the folds: 0.8339869281045752 Testing combination: {&#39;criterion&#39;: &#39;gini&#39;, &#39;max_features&#39;: &#39;log2&#39;, &#39;n_estimators&#39;: 300} Training on 1024 feature Average ROCAUC of the folds: 0.9878830333015993 Average accuracy of the folds: 0.9705751226036559 Average Matthews correlation of the folds: 0.813738649403107 Average recall of the folds: 0.7769607843137255 Average precision of the folds: 0.8854748603351955 Average f1 score of the folds: 0.8276762402088773 Testing combination: {&#39;criterion&#39;: &#39;gini&#39;, &#39;max_features&#39;: &#39;log2&#39;, &#39;n_estimators&#39;: 700} Training on 1024 feature Average ROCAUC of the folds: 0.9874289588321842 Average accuracy of the folds: 0.971020954079358 Average Matthews correlation of the folds: 0.8168598577517443 Average recall of the folds: 0.7818627450980392 Average precision of the folds: 0.8861111111111111 Average f1 score of the folds: 0.8307291666666667 Testing combination: {&#39;criterion&#39;: &#39;gini&#39;, &#39;max_features&#39;: &#39;sqrt&#39;, &#39;n_estimators&#39;: 10} Training on 1024 feature Average ROCAUC of the folds: 0.9693771697006415 Average accuracy of the folds: 0.9667855550601873 Average Matthews correlation of the folds: 0.7883133489239316 Average recall of the folds: 0.7475490196078431 Average precision of the folds: 0.8689458689458689 Average f1 score of the folds: 0.8036890645586298 Testing combination: {&#39;criterion&#39;: &#39;gini&#39;, &#39;max_features&#39;: &#39;sqrt&#39;, &#39;n_estimators&#39;: 50} Training on 1024 feature Average ROCAUC of the folds: 0.979355388550712 Average accuracy of the folds: 0.971020954079358 Average Matthews correlation of the folds: 0.819467316637404 Average recall of the folds: 0.803921568627451 Average precision of the folds: 0.8677248677248677 Average f1 score of the folds: 0.8346055979643766 Testing combination: {&#39;criterion&#39;: &#39;gini&#39;, &#39;max_features&#39;: &#39;sqrt&#39;, &#39;n_estimators&#39;: 100} Training on 1024 feature Average ROCAUC of the folds: 0.9788907961418998 Average accuracy of the folds: 0.9712438698172091 Average Matthews correlation of the folds: 0.8213359427559646 Average recall of the folds: 0.8088235294117647 Average precision of the folds: 0.8661417322834646 Average f1 score of the folds: 0.8365019011406843 Testing combination: {&#39;criterion&#39;: &#39;gini&#39;, &#39;max_features&#39;: &#39;sqrt&#39;, &#39;n_estimators&#39;: 200} Training on 1024 feature Average ROCAUC of the folds: 0.9808979194914847 Average accuracy of the folds: 0.9725813642443156 Average Matthews correlation of the folds: 0.8302884421519848 Average recall of the folds: 0.821078431372549 Average precision of the folds: 0.8701298701298701 Average f1 score of the folds: 0.8448928121059268 Testing combination: {&#39;criterion&#39;: &#39;gini&#39;, &#39;max_features&#39;: &#39;sqrt&#39;, &#39;n_estimators&#39;: 300} Training on 1024 feature Average ROCAUC of the folds: 0.9810433675677236 Average accuracy of the folds: 0.9728042799821668 Average Matthews correlation of the folds: 0.8315195254325867 Average recall of the folds: 0.821078431372549 Average precision of the folds: 0.8723958333333334 Average f1 score of the folds: 0.845959595959596 Testing combination: {&#39;criterion&#39;: &#39;gini&#39;, &#39;max_features&#39;: &#39;sqrt&#39;, &#39;n_estimators&#39;: 700} Training on 1024 feature Average ROCAUC of the folds: 0.9809562189270018 Average accuracy of the folds: 0.9728042799821668 Average Matthews correlation of the folds: 0.8315195254325867 Average recall of the folds: 0.821078431372549 Average precision of the folds: 0.8723958333333334 Average f1 score of the folds: 0.845959595959596 Testing combination: {&#39;criterion&#39;: &#39;entropy&#39;, &#39;max_features&#39;: &#39;log2&#39;, &#39;n_estimators&#39;: 10} Training on 1024 feature Average ROCAUC of the folds: 0.9703910990585543 Average accuracy of the folds: 0.9676772180115916 Average Matthews correlation of the folds: 0.7919589190669805 Average recall of the folds: 0.7328431372549019 Average precision of the folds: 0.8925373134328358 Average f1 score of the folds: 0.8048452220726784 Testing combination: {&#39;criterion&#39;: &#39;entropy&#39;, &#39;max_features&#39;: &#39;log2&#39;, &#39;n_estimators&#39;: 50} Training on 1024 feature Average ROCAUC of the folds: 0.9832452230524382 Average accuracy of the folds: 0.971020954079358 Average Matthews correlation of the folds: 0.81712633693644 Average recall of the folds: 0.7843137254901961 Average precision of the folds: 0.8839779005524862 Average f1 score of the folds: 0.8311688311688311 Testing combination: {&#39;criterion&#39;: &#39;entropy&#39;, &#39;max_features&#39;: &#39;log2&#39;, &#39;n_estimators&#39;: 100} Training on 1024 feature Average ROCAUC of the folds: 0.9870629345411535 Average accuracy of the folds: 0.9714667855550602 Average Matthews correlation of the folds: 0.8202380683239205 Average recall of the folds: 0.7892156862745098 Average precision of the folds: 0.8846153846153846 Average f1 score of the folds: 0.8341968911917099 Testing combination: {&#39;criterion&#39;: &#39;entropy&#39;, &#39;max_features&#39;: &#39;log2&#39;, &#39;n_estimators&#39;: 200} Training on 1024 feature Average ROCAUC of the folds: 0.9888071094058025 Average accuracy of the folds: 0.9716897012929113 Average Matthews correlation of the folds: 0.8220616199764084 Average recall of the folds: 0.7941176470588235 Average precision of the folds: 0.8828337874659401 Average f1 score of the folds: 0.8361290322580645 Testing combination: {&#39;criterion&#39;: &#39;entropy&#39;, &#39;max_features&#39;: &#39;log2&#39;, &#39;n_estimators&#39;: 300} Training on 1024 feature Average ROCAUC of the folds: 0.9886562521035879 Average accuracy of the folds: 0.9714667855550602 Average Matthews correlation of the folds: 0.8199727109343596 Average recall of the folds: 0.7867647058823529 Average precision of the folds: 0.8867403314917127 Average f1 score of the folds: 0.8337662337662338 Testing combination: {&#39;criterion&#39;: &#39;entropy&#39;, &#39;max_features&#39;: &#39;log2&#39;, &#39;n_estimators&#39;: 700} Training on 1024 feature Average ROCAUC of the folds: 0.9891295593764726 Average accuracy of the folds: 0.9719126170307624 Average Matthews correlation of the folds: 0.8230773003911601 Average recall of the folds: 0.7916666666666666 Average precision of the folds: 0.8873626373626373 Average f1 score of the folds: 0.8367875647668395 Testing combination: {&#39;criterion&#39;: &#39;entropy&#39;, &#39;max_features&#39;: &#39;sqrt&#39;, &#39;n_estimators&#39;: 10} Training on 1024 feature Average ROCAUC of the folds: 0.969766934483455 Average accuracy of the folds: 0.9692376281765492 Average Matthews correlation of the folds: 0.806348658128795 Average recall of the folds: 0.7794117647058824 Average precision of the folds: 0.8688524590163934 Average f1 score of the folds: 0.8217054263565892 Testing combination: {&#39;criterion&#39;: &#39;entropy&#39;, &#39;max_features&#39;: &#39;sqrt&#39;, &#39;n_estimators&#39;: 50} Training on 1024 feature Average ROCAUC of the folds: 0.980438736308648 Average accuracy of the folds: 0.971020954079358 Average Matthews correlation of the folds: 0.8197847830610261 Average recall of the folds: 0.8063725490196079 Average precision of the folds: 0.8657894736842106 Average f1 score of the folds: 0.8350253807106599 Testing combination: {&#39;criterion&#39;: &#39;entropy&#39;, &#39;max_features&#39;: &#39;sqrt&#39;, &#39;n_estimators&#39;: 100} Training on 1024 feature Average ROCAUC of the folds: 0.9843129441575551 Average accuracy of the folds: 0.9723584485064646 Average Matthews correlation of the folds: 0.8281374576264476 Average recall of the folds: 0.8137254901960784 Average precision of the folds: 0.8736842105263158 Average f1 score of the folds: 0.8426395939086295 Testing combination: {&#39;criterion&#39;: &#39;entropy&#39;, &#39;max_features&#39;: &#39;sqrt&#39;, &#39;n_estimators&#39;: 200} Training on 1024 feature Average ROCAUC of the folds: 0.983894029656983 Average accuracy of the folds: 0.9728042799821668 Average Matthews correlation of the folds: 0.8318264482528194 Average recall of the folds: 0.8235294117647058 Average precision of the folds: 0.8704663212435233 Average f1 score of the folds: 0.8463476070528967 Testing combination: {&#39;criterion&#39;: &#39;entropy&#39;, &#39;max_features&#39;: &#39;sqrt&#39;, &#39;n_estimators&#39;: 300} Training on 1024 feature Average ROCAUC of the folds: 0.9859011530065681 Average accuracy of the folds: 0.9725813642443156 Average Matthews correlation of the folds: 0.8302884421519848 Average recall of the folds: 0.821078431372549 Average precision of the folds: 0.8701298701298701 Average f1 score of the folds: 0.8448928121059268 Testing combination: {&#39;criterion&#39;: &#39;entropy&#39;, &#39;max_features&#39;: &#39;sqrt&#39;, &#39;n_estimators&#39;: 700} Training on 1024 feature Average ROCAUC of the folds: 0.9858735058515805 Average accuracy of the folds: 0.9725813642443156 Average Matthews correlation of the folds: 0.8299808932166253 Average recall of the folds: 0.8186274509803921 Average precision of the folds: 0.8720626631853786 Average f1 score of the folds: 0.8445006321112516 . np.mean(mccs) . 0.8299808932166253 . np.to .",
            "url": "https://drug-discovery.github.io/Drug-Discovery-blog/2021/04/24/4.0-RF_model_with_activations.html",
            "relUrl": "/2021/04/24/4.0-RF_model_with_activations.html",
            "date": " • Apr 24, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "3 - Create activations",
            "content": "DATASETS: . (a) Carbonic Anhydrase II (ChEMBL205), a protein lyase, (b) Cyclin-dependent kinase 2 (CHEMBL301), a protein kinase, (c) ether-a-go-go-related gene potassium channel 1 (HERG) (CHEMBL240), a voltage-gated ion channel, (d) Dopamine D4 receptor (CHEMBL219), a monoamine GPCR, (e) Coagulation factor X (CHEMBL244), a serine protease, (f) Cannabinoid CB1 receptor (CHEMBL218), a lipid-like GPCR and (g) Cytochrome P450 19A1 (CHEMBL1978), a cytochrome P450. The activity classes were selected based on data availability and as representatives of therapeutically important target classes or as anti-targets. . top_mcc_scores = { &#39;CHEMBL205&#39;: 0.862, &#39;CHEMBL301&#39;: 0.926, &#39;CHEMBL240&#39;: 0.884, &#39;CHEMBL219&#39;: 0.887, &#39;CHEMBL244&#39;: 0.983, &#39;CHEMBL218&#39;: 0.941, &#39;CHEMBL1978&#39;: 0.904} . !nvidia-smi . Fri Apr 23 10:36:45 2021 +--+ | NVIDIA-SMI 450.36.06 Driver Version: 450.36.06 CUDA Version: 11.0 | |-+-+-+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |===============================+======================+======================| | 0 Quadro P5000 On | 00000000:00:05.0 Off | Off | | 26% 22C P8 5W / 180W | 3407MiB / 16278MiB | 0% Default | | | | N/A | +-+-+-+ +--+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=============================================================================| +--+ . import pandas as pd import numpy as np from pathlib import Path . dataset=&#39;CHEMBL205_cl&#39; . path = Path(&#39;../dataset/13321_2017_226_MOESM1_ESM/&#39;) df = pd.read_csv(path/f&#39;{dataset}.csv&#39;) . list(path.iterdir()) . [PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/RdkitDescriptors.py&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL205_cl_ecfp_1024.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL218_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL205_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL1978_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL244_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL240_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL301_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL219_cl.csv&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/.ipynb_checkpoints&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/mol_images&#39;), PosixPath(&#39;../dataset/13321_2017_226_MOESM1_ESM/CHEMBL218_cl_ecfp_1024.csv&#39;)] . Generate activations . IMAGES=path/&#39;mol_images&#39;/f&#39;{dataset}&#39; . Create train validation split . from sklearn.model_selection import train_test_split . def get_df(data): &quot;&quot;&quot; Construct a dataframe containing CID, SMILES, Image, Activity &quot;&quot;&quot; name = data.stem df = pd.read_csv(data) df[&#39;Image&#39;] = df[&#39;CID&#39;].apply(lambda x: f&#39;{str(x)}.png&#39;) df = df[[&#39;CID&#39;, &#39;SMILES&#39;, &#39;Image&#39;, &#39;Activity&#39;]] return df, name . x_train,x_val = train_test_split(df.index, test_size=0.25, stratify=df[&#39;Activity&#39;], random_state=42) df.loc[x_train, &#39;is_valid&#39;]=False df.loc[x_val, &#39;is_valid&#39;]=True . Create dataloader . from fastai.vision.all import * . df[&#39;Image&#39;] = df[&#39;CID&#39;] + &#39;.png&#39; df.head() . CID SMILES Activity Image is_valid . 0 CHEMBL188002 | S(=O)(=O)(N)c1cc(N/C(/S)=N c2cc(C(=O)[O-])c(cc2)C=2c3c(OC4=CC(=O)C=CC=24)cc(O)cc3)ccc1 | 1 | CHEMBL188002.png | True | . 1 CHEMBL364127 | Clc1ccc(cc1)C(=O)NC1Cc2cc(S(=O)(=O)N)ccc2C1 | 1 | CHEMBL364127.png | False | . 2 CHEMBL1683469 | S(=O)(=O)(N)c1ccc(cc1)CNS(=O)(=O)CC12CCC(CC1=O)C2(C)C | 1 | CHEMBL1683469.png | False | . 3 CHEMBL52564 | Oc1ccccc1 C=C C(=O)[O-] | 1 | CHEMBL52564.png | False | . 4 CHEMBL21427 | OB(O)c1ccc(OC)cc1 | 1 | CHEMBL21427.png | False | . db = DataBlock( blocks = (ImageBlock(), CategoryBlock()), get_x=ColReader(&#39;Image&#39;, pref=IMAGES), get_y=ColReader(&#39;Activity&#39;), splitter=ColSplitter(&#39;is_valid&#39;), item_tfms=None, batch_tfms=None ) . dls = db.dataloaders(df, bs=64, shuffle_train=True) . dls.show_batch() . Train CNN model . from sklearn.metrics import auc,roc_auc_score,recall_score,precision_score,f1_score from sklearn.metrics import matthews_corrcoef from sklearn.metrics import accuracy_score . def train_model(dls, arch=resnet18, epochs=6, freeze_epochs=5, wd=None): print(f&#39;Training model on dataset: {dataset}&#39;) print(f&#39;Architechture: {arch}&#39;) print(f&#39;Untrained epochs: freeze_epochs={freeze_epochs}&#39;) print(f&#39;Trained epochs: epochs={epochs}&#39;) learn = cnn_learner(dls, arch=resnet18, pretrained=True, wd=wd, metrics=[accuracy, F1Score(), Precision(), Recall(), RocAucBinary(), MatthewsCorrCoef()]) print(f&#39;Finding learning rate...&#39;) lr_min, lr_steep = learn.lr_find(suggestions=True, show_plot=False) print(f&#39;Training model with learning rate: {lr_min}&#39;) learn.fine_tune(epochs, lr_min, freeze_epochs=freeze_epochs) return learn . learn = train_model(dls) . Training model on dataset: CHEMBL205_cl Architechture: &lt;function resnet18 at 0x7fc82ab47160&gt; Untrained epochs: freeze_epochs=5 Trained epochs: epochs=6 Finding learning rate... . Training model with learning rate: 0.014454397559165954 . epoch train_loss valid_loss accuracy f1_score precision_score recall_score roc_auc_score matthews_corrcoef time . 0 | 0.316155 | 0.201153 | 0.931119 | 0.609355 | 0.629243 | 0.590686 | 0.893801 | 0.571970 | 00:35 | . 1 | 0.210779 | 0.141031 | 0.946277 | 0.674764 | 0.750751 | 0.612745 | 0.953118 | 0.649770 | 00:33 | . 2 | 0.192586 | 0.155669 | 0.948506 | 0.656761 | 0.833962 | 0.541667 | 0.959122 | 0.647466 | 00:33 | . 3 | 0.158814 | 0.123375 | 0.959652 | 0.786808 | 0.757370 | 0.818627 | 0.977237 | 0.765268 | 00:33 | . 4 | 0.137742 | 0.150996 | 0.954302 | 0.708393 | 0.844068 | 0.610294 | 0.976521 | 0.694898 | 00:33 | . epoch train_loss valid_loss accuracy f1_score precision_score recall_score roc_auc_score matthews_corrcoef time . 0 | 0.131968 | 0.113428 | 0.956309 | 0.729282 | 0.835443 | 0.647059 | 0.970748 | 0.712758 | 00:42 | . 1 | 0.132000 | 0.181391 | 0.927998 | 0.387097 | 0.857143 | 0.250000 | 0.964811 | 0.439871 | 00:42 | . 2 | 0.121696 | 0.135173 | 0.948952 | 0.701434 | 0.749304 | 0.659314 | 0.960724 | 0.675297 | 00:42 | . 3 | 0.084639 | 0.093851 | 0.963219 | 0.780293 | 0.854227 | 0.718137 | 0.986940 | 0.763797 | 00:42 | . 4 | 0.044858 | 0.095345 | 0.968569 | 0.823529 | 0.841432 | 0.806373 | 0.984942 | 0.806506 | 00:42 | . 5 | 0.017580 | 0.102198 | 0.972358 | 0.851675 | 0.831776 | 0.872549 | 0.985186 | 0.836735 | 00:42 | . interp = ClassificationInterpretation.from_learner(learn) . interp.plot_confusion_matrix() . interp.plot_top_losses(k=5) . Hook the activations from the second last layer . class Hook(): def hook_func(self, m, i, o): self.stored = o.detach().clone() . learn.model[-1][-5] . Linear(in_features=1024, out_features=512, bias=False) . hook_output = Hook() hook = learn.model[-1][-5].register_forward_hook(hook_output.hook_func) . df_nodupl=df . test_db = DataBlock( blocks=(ImageBlock(), CategoryBlock()), get_x=ColReader(&#39;Image&#39;, pref=IMAGES), get_y=ColReader(&#39;Activity&#39;), splitter=RandomSplitter(valid_pct=0.), item_tfms=None, batch_tfms=None ) . test_dls = test_db.dataloaders(df_nodupl, bs=1) . test_dls.items.head() . CID SMILES Activity Image is_valid . 13292 CHEMBL538529 | o1nc(cc1C[NH+]1CCN(CC1)c1ccccc1OC(C)C)CN1CCCCC1=O | 0 | CHEMBL538529.png | False | . 6115 CHEMBL120871 | S(=O)(=O)(NC(Cc1ccc(N)cc1)C(=O)N1CCC(CC1)CCF)C1=CNC=CC1[NH2+]C(Cc1ccccc1)C[NH+](C)C | 0 | CHEMBL120871.png | False | . 195 CHEMBL3098531 | S1 C( N(N=C1C(=O)C)c1ccc(S(=O)(=O)N)cc1)=C( C#N)/C(OCC)=O | 1 | CHEMBL3098531.png | False | . 15007 CHEMBL350027 | O1N2C(CC13CCCCC3)C(C(C2)C[NH+]1CCC(CC1)c1ccccc1)c1ccccc1 | 0 | CHEMBL350027.png | False | . 1636 CHEMBL248560 | s1cc(nc1-c1cccnc1)-c1ccc(cc1)CC[NH2+]CC(O)c1cccnc1 | 0 | CHEMBL248560.png | True | . test_dls.dataset[0] . (PILImage mode=RGB size=224x224, TensorCategory(0)) . test_df = test_dls.items.reset_index() . test_df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 17941 entries, 0 to 17940 Data columns (total 6 columns): # Column Non-Null Count Dtype -- -- 0 index 17941 non-null int64 1 CID 17941 non-null object 2 SMILES 17941 non-null object 3 Activity 17941 non-null int64 4 Image 17941 non-null object 5 is_valid 17941 non-null object dtypes: int64(2), object(4) memory usage: 841.1+ KB . df_nodupl.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 17941 entries, 0 to 17940 Data columns (total 5 columns): # Column Non-Null Count Dtype -- -- 0 CID 17941 non-null object 1 SMILES 17941 non-null object 2 Activity 17941 non-null int64 3 Image 17941 non-null object 4 is_valid 17941 non-null object dtypes: int64(1), object(4) memory usage: 700.9+ KB . Check . test_df.loc[test_df.CID == &#39;CHEMBL1089637&#39;] . index CID SMILES Activity Image is_valid . 15524 1403 | CHEMBL1089637 | S(=O)(=O)(N)c1ccc(NC2OCC(O)C(O)C2O)cc1 | 1 | CHEMBL1089637.png | False | . df_nodupl.loc[df_nodupl.CID == &#39;CHEMBL1089637&#39;] . CID SMILES Activity Image is_valid . 1403 CHEMBL1089637 | S(=O)(=O)(N)c1ccc(NC2OCC(O)C(O)C2O)cc1 | 1 | CHEMBL1089637.png | False | . test_dls.dataset . (#17941) [(PILImage mode=RGB size=224x224, TensorCategory(0)),(PILImage mode=RGB size=224x224, TensorCategory(0)),(PILImage mode=RGB size=224x224, TensorCategory(1)),(PILImage mode=RGB size=224x224, TensorCategory(0)),(PILImage mode=RGB size=224x224, TensorCategory(0)),(PILImage mode=RGB size=224x224, TensorCategory(0)),(PILImage mode=RGB size=224x224, TensorCategory(0)),(PILImage mode=RGB size=224x224, TensorCategory(0)),(PILImage mode=RGB size=224x224, TensorCategory(0)),(PILImage mode=RGB size=224x224, TensorCategory(0))...] . test_dls.dataset[0][0] . test_df.loc[test_df.CID==&#39;CHEMBL1089637&#39;] . index CID SMILES Activity Image is_valid . 15524 1403 | CHEMBL1089637 | S(=O)(=O)(N)c1ccc(NC2OCC(O)C(O)C2O)cc1 | 1 | CHEMBL1089637.png | False | . def get_data(CID): idx = test_df.loc[test_df.CID==CID].index[0] print(idx) return test_dls.dataset[idx] . t_img, t_cat = get_data(&#39;CHEMBL1089637&#39;) . 15524 . len(test_dls.dataset) . 17941 . test_dls.dataset[0] . (PILImage mode=RGB size=224x224, TensorCategory(0)) . t_img . df_nodupl[&#39;activations&#39;] = None . def get_activations(CID, ret=False): idx = df_nodupl.loc[df_nodupl.CID == CID].index[0] print(idx) data = get_data(CID) img = data[0] with torch.no_grad(): output = learn.predict(img) acts = np.array(hook_output.stored.cpu())[0] #df_nodupl.iloc[idx][&#39;acts&#39;] = list(acts) if not ret: df_nodupl.at[idx, &#39;activations&#39;] = list(acts) if ret: return list(acts) . df_nodupl.CID.values[0] . &#39;CHEMBL188002&#39; . %%capture for CID in df_nodupl.CID.values: get_activations(CID) . df_nodupl.head() . CID SMILES Activity Image is_valid activations . 0 CHEMBL188002 | S(=O)(=O)(N)c1cc(N/C(/S)=N c2cc(C(=O)[O-])c(cc2)C=2c3c(OC4=CC(=O)C=CC=24)cc(O)cc3)ccc1 | 1 | CHEMBL188002.png | True | [20.441788, -34.070347, -55.874096, -46.303505, -36.94316, -32.880577, 56.924206, -21.065784, 100.98068, 25.434101, -27.366495, 50.514477, 22.279602, 13.780892, -61.33496, 51.5019, -82.39697, -59.213398, -25.909046, -40.934708, 41.761215, -78.96105, -50.266132, 47.5966, -46.640957, -50.10497, -36.33068, -45.921204, 44.571804, -42.544792, -30.720026, -29.033741, 23.248016, -22.118792, 14.806098, -47.23298, 45.85109, -68.075584, -38.983734, -45.53679, -41.039043, -33.94125, -37.79083, -12.287365, -21.54076, -0.8218162, -39.225323, 33.397213, -54.33288, -31.158333, -12.660143, -31.700134, -59... | . 1 CHEMBL364127 | Clc1ccc(cc1)C(=O)NC1Cc2cc(S(=O)(=O)N)ccc2C1 | 1 | CHEMBL364127.png | False | [-35.60922, -76.03871, -122.86161, -70.081474, -92.91446, -105.172745, 42.786087, -101.023026, 106.76421, 24.83023, -58.21196, 72.37561, -24.386883, 64.17287, -66.00833, 54.19459, -110.52943, -47.77837, -79.58959, -92.48153, 68.64848, -144.17317, -74.54582, 104.501915, -117.897644, -97.15993, -98.41654, -99.334335, -62.823017, -89.71797, -50.966053, -32.014545, -60.89653, -76.85967, -64.29767, -120.65323, -33.115356, -74.8855, -83.01998, -97.291954, -92.31988, -27.57251, -78.88678, -19.02112, -77.43537, -18.399061, -47.787197, 53.6252, -126.53403, -51.354034, -58.816734, -100.20532, -136.5... | . 2 CHEMBL1683469 | S(=O)(=O)(N)c1ccc(cc1)CNS(=O)(=O)CC12CCC(CC1=O)C2(C)C | 1 | CHEMBL1683469.png | False | [-72.19954, -79.73292, -145.6987, -81.835724, -115.660416, -127.5523, 40.022156, -119.41521, 110.88527, 40.064434, -72.70248, 91.60647, -38.015022, 85.68369, -78.754135, 59.92734, -125.62406, -48.954712, -105.795265, -115.42396, 88.002655, -181.4998, -88.53843, 133.21863, -150.9004, -122.18439, -126.31767, -127.27838, -104.31726, -106.5082, -63.193306, -26.757238, -99.14134, -104.85434, -82.13036, -150.79893, -51.76007, -90.88706, -99.009346, -117.360466, -119.76474, -33.073982, -102.74929, -17.49065, -94.24532, -38.0294, -55.346317, 57.922554, -155.49355, -65.050415, -67.572586, -116.0627... | . 3 CHEMBL52564 | Oc1ccccc1 C=C C(=O)[O-] | 1 | CHEMBL52564.png | False | [-33.640495, -42.489914, -80.051056, -65.76445, -55.754475, -63.614277, 46.954594, -38.22408, 87.1613, 48.764492, -42.982452, 71.60744, -9.838839, 30.381317, -64.548035, 59.9069, -89.63465, -69.76305, -52.906982, -61.743454, 43.851025, -125.996635, -68.18846, 78.80186, -73.34283, -89.14439, -60.68271, -68.85139, -7.1954412, -53.587967, -44.452557, -16.017065, -33.667374, -57.250996, -1.0856264, -77.60109, 13.428894, -82.55813, -53.51783, -71.76159, -75.88027, -40.19798, -62.13004, -4.3708777, -39.762478, -30.058334, -44.56897, 35.67237, -86.6604, -47.44278, -25.278542, -48.670944, -88.1199... | . 4 CHEMBL21427 | OB(O)c1ccc(OC)cc1 | 1 | CHEMBL21427.png | False | [-40.57054, -42.852943, -82.66586, -61.070065, -56.15604, -68.46805, 38.568237, -34.71558, 61.607277, 44.128716, -38.912914, 71.710106, -20.562906, 31.930721, -55.267548, 53.782234, -87.36618, -74.11311, -55.677666, -57.40837, 34.612038, -120.8614, -73.27676, 74.86714, -74.68885, -80.09229, -61.38198, -71.74933, -34.403572, -58.32266, -45.425415, -12.5241375, -47.365665, -58.08107, -9.154864, -78.2698, -8.076019, -71.314285, -53.760323, -69.95956, -78.50262, -36.01127, -59.322395, -5.198322, -41.824165, -37.047935, -40.1027, 32.615498, -87.88623, -46.66415, -18.4444, -52.229774, -88.0478, ... | . df_nodupl.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 17941 entries, 0 to 17940 Data columns (total 6 columns): # Column Non-Null Count Dtype -- -- 0 CID 17941 non-null object 1 SMILES 17941 non-null object 2 Activity 17941 non-null int64 3 Image 17941 non-null object 4 is_valid 17941 non-null object 5 activations 17941 non-null object dtypes: int64(1), object(5) memory usage: 841.1+ KB . df_acts = pd.concat([df_nodupl, pd.DataFrame(df_nodupl.activations.values.tolist()).add_prefix(&#39;act_&#39;)], axis=1) . df_acts.drop(&#39;activations&#39;, axis=1, inplace=True) . df_acts.head() . CID SMILES Activity Image is_valid act_0 act_1 act_2 act_3 act_4 ... act_502 act_503 act_504 act_505 act_506 act_507 act_508 act_509 act_510 act_511 . 0 CHEMBL188002 | S(=O)(=O)(N)c1cc(N/C(/S)=N c2cc(C(=O)[O-])c(cc2)C=2c3c(OC4=CC(=O)C=CC=24)cc(O)cc3)ccc1 | 1 | CHEMBL188002.png | True | 20.441788 | -34.070347 | -55.874096 | -46.303505 | -36.943161 | ... | -20.266380 | -58.616051 | -36.874432 | -84.006630 | -28.130043 | -14.237524 | -30.243919 | -89.924866 | -25.477444 | -13.185804 | . 1 CHEMBL364127 | Clc1ccc(cc1)C(=O)NC1Cc2cc(S(=O)(=O)N)ccc2C1 | 1 | CHEMBL364127.png | False | -35.609219 | -76.038712 | -122.861610 | -70.081474 | -92.914459 | ... | -27.719458 | -79.247879 | -71.388512 | -117.074829 | -87.031128 | -25.362850 | -91.691391 | -97.514877 | -159.834167 | 37.859943 | . 2 CHEMBL1683469 | S(=O)(=O)(N)c1ccc(cc1)CNS(=O)(=O)CC12CCC(CC1=O)C2(C)C | 1 | CHEMBL1683469.png | False | -72.199539 | -79.732918 | -145.698700 | -81.835724 | -115.660416 | ... | -27.371447 | -91.037331 | -82.402603 | -140.058167 | -110.499306 | -35.576706 | -118.137932 | -114.797058 | -210.545105 | 58.341396 | . 3 CHEMBL52564 | Oc1ccccc1 C=C C(=O)[O-] | 1 | CHEMBL52564.png | False | -33.640495 | -42.489914 | -80.051056 | -65.764450 | -55.754475 | ... | -12.962411 | -65.378036 | -52.445572 | -105.202003 | -54.042187 | -23.038553 | -45.937416 | -107.758331 | -74.264862 | 15.236348 | . 4 CHEMBL21427 | OB(O)c1ccc(OC)cc1 | 1 | CHEMBL21427.png | False | -40.570541 | -42.852943 | -82.665863 | -61.070065 | -56.156040 | ... | -14.881062 | -61.484863 | -52.275417 | -100.329498 | -55.440769 | -24.665730 | -48.966393 | -98.103355 | -83.055305 | 20.628500 | . 5 rows × 517 columns . df_acts.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 17941 entries, 0 to 17940 Columns: 517 entries, CID to act_511 dtypes: float64(512), int64(1), object(4) memory usage: 70.8+ MB . Add ECFB to dataframe . df_ecfp = pd.read_csv(path/&#39;CHEMBL205_cl_ecfp_1024.csv&#39;) . df_ecfp.head() . CID SMILES Activity ECFP4_1 ECFP4_2 ECFP4_3 ECFP4_4 ECFP4_5 ECFP4_6 ECFP4_7 ... ECFP4_1015 ECFP4_1016 ECFP4_1017 ECFP4_1018 ECFP4_1019 ECFP4_1020 ECFP4_1021 ECFP4_1022 ECFP4_1023 ECFP4_1024 . 0 CHEMBL188002 | S(=O)(=O)(N)c1cc(N/C(/S)=N c2cc(C(=O)[O-])c(cc2)C=2c3c(OC4=CC(=O)C=CC=24)cc(O)cc3)ccc1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 1 CHEMBL364127 | Clc1ccc(cc1)C(=O)NC1Cc2cc(S(=O)(=O)N)ccc2C1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | . 2 CHEMBL1683469 | S(=O)(=O)(N)c1ccc(cc1)CNS(=O)(=O)CC12CCC(CC1=O)C2(C)C | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | . 3 CHEMBL52564 | Oc1ccccc1 C=C C(=O)[O-] | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 4 CHEMBL21427 | OB(O)c1ccc(OC)cc1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 5 rows × 1027 columns . df_ecfp.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 17941 entries, 0 to 17940 Columns: 1027 entries, CID to ECFP4_1024 dtypes: int64(1025), object(2) memory usage: 140.6+ MB . df_acts.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 17941 entries, 0 to 17940 Columns: 517 entries, CID to act_511 dtypes: float64(512), int64(1), object(4) memory usage: 70.8+ MB . df = df_ecfp.merge(df_acts, on=&#39;CID&#39;) . df.head() . CID SMILES_x Activity_x ECFP4_1 ECFP4_2 ECFP4_3 ECFP4_4 ECFP4_5 ECFP4_6 ECFP4_7 ... act_502 act_503 act_504 act_505 act_506 act_507 act_508 act_509 act_510 act_511 . 0 CHEMBL188002 | S(=O)(=O)(N)c1cc(N/C(/S)=N c2cc(C(=O)[O-])c(cc2)C=2c3c(OC4=CC(=O)C=CC=24)cc(O)cc3)ccc1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | -20.266380 | -58.616051 | -36.874432 | -84.006630 | -28.130043 | -14.237524 | -30.243919 | -89.924866 | -25.477444 | -13.185804 | . 1 CHEMBL364127 | Clc1ccc(cc1)C(=O)NC1Cc2cc(S(=O)(=O)N)ccc2C1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | -27.719458 | -79.247879 | -71.388512 | -117.074829 | -87.031128 | -25.362850 | -91.691391 | -97.514877 | -159.834167 | 37.859943 | . 2 CHEMBL1683469 | S(=O)(=O)(N)c1ccc(cc1)CNS(=O)(=O)CC12CCC(CC1=O)C2(C)C | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | -27.371447 | -91.037331 | -82.402603 | -140.058167 | -110.499306 | -35.576706 | -118.137932 | -114.797058 | -210.545105 | 58.341396 | . 3 CHEMBL52564 | Oc1ccccc1 C=C C(=O)[O-] | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | -12.962411 | -65.378036 | -52.445572 | -105.202003 | -54.042187 | -23.038553 | -45.937416 | -107.758331 | -74.264862 | 15.236348 | . 4 CHEMBL21427 | OB(O)c1ccc(OC)cc1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | -14.881062 | -61.484863 | -52.275417 | -100.329498 | -55.440769 | -24.665730 | -48.966393 | -98.103355 | -83.055305 | 20.628500 | . 5 rows × 1543 columns . df.drop([&#39;SMILES_y&#39;, &quot;Activity_y&quot;], axis=1, inplace=True) . df.head() . CID SMILES_x Activity_x ECFP4_1 ECFP4_2 ECFP4_3 ECFP4_4 ECFP4_5 ECFP4_6 ECFP4_7 ... act_502 act_503 act_504 act_505 act_506 act_507 act_508 act_509 act_510 act_511 . 0 CHEMBL188002 | S(=O)(=O)(N)c1cc(N/C(/S)=N c2cc(C(=O)[O-])c(cc2)C=2c3c(OC4=CC(=O)C=CC=24)cc(O)cc3)ccc1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | -20.266380 | -58.616051 | -36.874432 | -84.006630 | -28.130043 | -14.237524 | -30.243919 | -89.924866 | -25.477444 | -13.185804 | . 1 CHEMBL364127 | Clc1ccc(cc1)C(=O)NC1Cc2cc(S(=O)(=O)N)ccc2C1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | -27.719458 | -79.247879 | -71.388512 | -117.074829 | -87.031128 | -25.362850 | -91.691391 | -97.514877 | -159.834167 | 37.859943 | . 2 CHEMBL1683469 | S(=O)(=O)(N)c1ccc(cc1)CNS(=O)(=O)CC12CCC(CC1=O)C2(C)C | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | -27.371447 | -91.037331 | -82.402603 | -140.058167 | -110.499306 | -35.576706 | -118.137932 | -114.797058 | -210.545105 | 58.341396 | . 3 CHEMBL52564 | Oc1ccccc1 C=C C(=O)[O-] | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | -12.962411 | -65.378036 | -52.445572 | -105.202003 | -54.042187 | -23.038553 | -45.937416 | -107.758331 | -74.264862 | 15.236348 | . 4 CHEMBL21427 | OB(O)c1ccc(OC)cc1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | -14.881062 | -61.484863 | -52.275417 | -100.329498 | -55.440769 | -24.665730 | -48.966393 | -98.103355 | -83.055305 | 20.628500 | . 5 rows × 1541 columns . df.rename(columns={&#39;SMILES_x&#39;: &#39;SMILES&#39;, &#39;Activity_x&#39;: &#39;Activity&#39;}, inplace=True) . df.is_valid.value_counts() . False 13455 True 4486 Name: is_valid, dtype: int64 . df.to_csv(path/&#39;chembl205-data-with-ecfp-activations.csv&#39;, index=None) .",
            "url": "https://drug-discovery.github.io/Drug-Discovery-blog/2021/04/24/3.0-create_activations.html",
            "relUrl": "/2021/04/24/3.0-create_activations.html",
            "date": " • Apr 24, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "2 - Image Classification with DNN",
            "content": "DATASETS: . (a) Carbonic Anhydrase II (ChEMBL205), a protein lyase, (b) Cyclin-dependent kinase 2 (CHEMBL301), a protein kinase, (c) ether-a-go-go-related gene potassium channel 1 (HERG) (CHEMBL240), a voltage-gated ion channel, (d) Dopamine D4 receptor (CHEMBL219), a monoamine GPCR, (e) Coagulation factor X (CHEMBL244), a serine protease, (f) Cannabinoid CB1 receptor (CHEMBL218), a lipid-like GPCR and (g) Cytochrome P450 19A1 (CHEMBL1978), a cytochrome P450. The activity classes were selected based on data availability and as representatives of therapeutically important target classes or as anti-targets. . Generate images . DATA = path/&#39;mol_images&#39; DATA.mkdir(exist_ok=True) . df.head() . CID SMILES Activity . 0 CHEMBL188002 | S(=O)(=O)(N)c1cc(N/C(/S)=N c2cc(C(=O)[O-])c(cc2)C=2c3c(OC4=CC(=O)C=CC=24)cc(O)cc3)ccc1 | 1 | . 1 CHEMBL364127 | Clc1ccc(cc1)C(=O)NC1Cc2cc(S(=O)(=O)N)ccc2C1 | 1 | . 2 CHEMBL1683469 | S(=O)(=O)(N)c1ccc(cc1)CNS(=O)(=O)CC12CCC(CC1=O)C2(C)C | 1 | . 3 CHEMBL52564 | Oc1ccccc1 C=C C(=O)[O-] | 1 | . 4 CHEMBL21427 | OB(O)c1ccc(OC)cc1 | 1 | . IMAGES = DATA/dataset if not IMAGES.is_dir(): IMAGES.mkdir(exist_ok=True) for i, r in df.iterrows(): cid = r.CID smile = r.SMILES mol = Chem.MolFromSmiles(smile) Chem.Draw.MolToFile(mol, IMAGES/f&#39;{cid}.png&#39;, size = (224, 224), imageType=&#39;png&#39;) . images = list(IMAGES.glob(&#39;*.png&#39;)) . Plotting specified fingerprint image of molecule. . Create train validation split . x_train, x_valid = train_test_split(df.index, test_size=0.2, random_state=666, stratify=df[&#39;Activity&#39;]) df.loc[x_train, &#39;is_valid&#39;]=False df.loc[x_valid, &#39;is_valid&#39;]=True . Create dataloader . df[&#39;Image&#39;] = df[&#39;CID&#39;] + &#39;.png&#39; df.head() . CID SMILES Activity is_valid Image . 0 CHEMBL188002 | S(=O)(=O)(N)c1cc(N/C(/S)=N c2cc(C(=O)[O-])c(cc2)C=2c3c(OC4=CC(=O)C=CC=24)cc(O)cc3)ccc1 | 1 | False | CHEMBL188002.png | . 1 CHEMBL364127 | Clc1ccc(cc1)C(=O)NC1Cc2cc(S(=O)(=O)N)ccc2C1 | 1 | False | CHEMBL364127.png | . 2 CHEMBL1683469 | S(=O)(=O)(N)c1ccc(cc1)CNS(=O)(=O)CC12CCC(CC1=O)C2(C)C | 1 | False | CHEMBL1683469.png | . 3 CHEMBL52564 | Oc1ccccc1 C=C C(=O)[O-] | 1 | False | CHEMBL52564.png | . 4 CHEMBL21427 | OB(O)c1ccc(OC)cc1 | 1 | False | CHEMBL21427.png | . db = DataBlock( blocks = (ImageBlock(), CategoryBlock()), get_x=ColReader(&#39;Image&#39;, pref=IMAGES), get_y=ColReader(&#39;Activity&#39;), splitter=ColSplitter(&#39;is_valid&#39;), item_tfms=None, batch_tfms=None ) . dls = db.dataloaders(df, bs=64, shuffle_train=True) . dls.show_batch() . Train CNN model . def train_model(dls, arch=resnet18, epochs=6, freeze_epochs=5, wd=None): print(f&#39;Training model on dataset: {dataset}&#39;) print(f&#39;Architechture: {arch}&#39;) print(f&#39;Untrained epochs: freeze_epochs={freeze_epochs}&#39;) print(f&#39;Trained epochs: epochs={epochs}&#39;) learn = cnn_learner(dls, arch=resnet18, pretrained=True, wd=wd, metrics=[accuracy, F1Score(), Precision(), Recall(), RocAucBinary(), MatthewsCorrCoef()]) print(f&#39;Finding learning rate...&#39;) lr_min, lr_steep = learn.lr_find(suggestions=True, show_plot=False) print(f&#39;Training model with learning rate: {lr_min}&#39;) learn.fine_tune(epochs, lr_min, freeze_epochs=freeze_epochs) return learn . learn = train_model(dls, epochs=6, freeze_epochs=0, wd=2e-4) . Training model on dataset: CHEMBL205_cl Architechture: &lt;function resnet18 at 0x7f68043458b0&gt; Untrained epochs: freeze_epochs=0 Trained epochs: epochs=6 Finding learning rate... . Training model with learning rate: 0.017378008365631102 . epoch train_loss valid_loss accuracy f1_score precision_score recall_score roc_auc_score matthews_corrcoef time . 0 | 0.186535 | 0.144452 | 0.947618 | 0.632812 | 0.870968 | 0.496933 | 0.944797 | 0.634675 | 00:54 | . 1 | 0.158604 | 0.263344 | 0.909167 | 0.000000 | 0.000000 | 0.000000 | 0.958180 | 0.000000 | 00:55 | . 2 | 0.135845 | 0.146966 | 0.948732 | 0.754011 | 0.668246 | 0.865031 | 0.960853 | 0.733458 | 00:53 | . 3 | 0.107818 | 0.148757 | 0.962106 | 0.786164 | 0.806452 | 0.766871 | 0.951311 | 0.765681 | 00:54 | . 4 | 0.077988 | 0.093993 | 0.965729 | 0.801292 | 0.846416 | 0.760736 | 0.981459 | 0.783933 | 00:47 | . 5 | 0.043451 | 0.096992 | 0.970744 | 0.835165 | 0.855305 | 0.815951 | 0.982547 | 0.819396 | 00:44 | . /opt/conda/envs/fastai/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1221: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior. _warn_prf(average, modifier, msg_start, len(result)) /opt/conda/envs/fastai/lib/python3.8/site-packages/sklearn/metrics/_classification.py:846: RuntimeWarning: invalid value encountered in double_scalars mcc = cov_ytyp / np.sqrt(cov_ytyt * cov_ypyp) . interp = ClassificationInterpretation.from_learner(learn) . interp.plot_confusion_matrix() . interp.plot_top_losses(k=5) . Hook the activations from the second last layer . layers = flatten_model(learn.model) len(layers) . 60 . layers[-10:-5] . [AdaptiveAvgPool2d(output_size=1), AdaptiveMaxPool2d(output_size=1), Flatten(full=False), BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True), Dropout(p=0.25, inplace=False)] .",
            "url": "https://drug-discovery.github.io/Drug-Discovery-blog/jupyter/2021/04/24/2.0-image_classification.html",
            "relUrl": "/jupyter/2021/04/24/2.0-image_classification.html",
            "date": " • Apr 24, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "1 - Data preparations",
            "content": "Backround . The article uses the highly used and preprocessed bioactivity dataset from the ChEMBL database, version 20. More specifically these seven different bioactivity classes: . (a) Carbonic Anhydrase II (ChEMBL205), a protein lyase, (b) Cyclin-dependent kinase 2 (CHEMBL301), a protein kinase, (c) ether-a-go-go-related gene potassium channel 1 (HERG) (CHEMBL240), a voltage-gated ion channel, (d) Dopamine D4 receptor (CHEMBL219), a monoamine GPCR, (e) Coagulation factor X (CHEMBL244), a serine protease, (f) Cannabinoid CB1 receptor (CHEMBL218), a lipid-like GPCR and (g) Cytochrome P450 19A1 (CHEMBL1978), a cytochrome P450. The activity classes were selected based on data availability and as representatives of therapeutically important target classes or as anti-targets. . In this project we will mainly focus on (a) the ChEMBL205 and (f) ChEMBL218 as these got quite different results from each other. Also . First we need to convert the smiles from the dataset to ECFP fingerprint which is hashed into 1024 length bits. For this we made a function for creating a fingerprint using the methods from the RDKit library as follows: . def fp(smile, diam = 2, bits = 1024): mol = Chem.MolFromSmiles(smile) Chem.SanitizeMol(mol) fp = AllChem.GetMorganFingerprintAsBitVect(mol, diam, nBits = bits) return fp . We then define a method for converting the csv with smiles to also have the fingerprint stored as colums from ECFP_1 to ECFP_1024 for each row. . #Generated Circular fingerprints hashed into n bits length vectors. def ECFP(ifile, ofile, diam, bits): print(f&quot;Making fingerprints for file: {ifile}&quot;) df = pd.read_csv(ifile) df.insert(2, &quot;ECFP4_&quot;, df.SMILES.apply(fp)) df[[f&quot;ECFP4_{i+1}&quot; for i in range(len(df.ECFP4_[0]))]] = df.ECFP4_.to_list() df.drop(&quot;ECFP4_&quot;, axis = 1, inplace = True) df.to_csv(path/ofile, index = None) return df . Here we can specify the dataset we want to use and to run the ECFP function on. . dataset=&#39;CHEMBL205_cl&#39; . #ECFP(path/f&#39;{dataset}.csv&#39;, f&#39;./{dataset}_ecfp_1024.csv&#39;, 2, 1024) . Next we create a dataframe from the newly generated csv file. . df = pd.read_csv(path/f&#39;{dataset}_ecfp_1024.csv&#39;) . NameError Traceback (most recent call last) &lt;ipython-input-9-dac3d8b86b4e&gt; in &lt;module&gt; -&gt; 1 df = pd.read_csv(path/f&#39;{dataset}_ecfp_1024.csv&#39;) NameError: name &#39;path&#39; is not defined . df.head() . NameError Traceback (most recent call last) &lt;ipython-input-3-c42a15b2c7cf&gt; in &lt;module&gt; -&gt; 1 df.head() NameError: name &#39;df&#39; is not defined . df.info() . NameError Traceback (most recent call last) &lt;ipython-input-1-a74c58233b9e&gt; in &lt;module&gt; -&gt; 1 df.info() NameError: name &#39;df&#39; is not defined . X, y = df.drop([&quot;CID&quot;, &quot;SMILES&quot;, &quot;Activity&quot;], axis=1), df[&quot;Activity&quot;] . Train test split . X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=666) . 5-Fold Cross Validation . Follows the article where the data is split using 5-fold cross validation. . kf = KFold(n_splits=5, shuffle=True, random_state=999) . X_train_list, X_valid_list, y_train_list, y_valid_list = [], [], [], [] for train_index, valid_index in kf.split(X_train): X_train_list.append(X_train.iloc[train_index]) X_valid_list.append(X_train.iloc[valid_index]) y_train_list.append(y_train.iloc[train_index]) y_valid_list.append(y_train.iloc[valid_index]) . Random Forest . def train_rf(X_train, X_test, y_train, y_test, n_estimators=5, criterion=&#39;gini&#39;, max_features=&#39;log2&#39;): rf = RandomForestClassifier(n_estimators=n_estimators, criterion=criterion, min_samples_split=2, max_features=max_features, max_leaf_nodes=None,bootstrap=False,oob_score=False, n_jobs=-1, random_state=69) rf.fit(X_train,y_train) y_pred= rf.predict(X_test) y_pred_prob=rf.predict_proba(X_test) temp=[] for j in range(len(y_pred_prob)): temp.append(y_pred_prob[j][1]) auc=roc_auc_score(np.array(y_test),np.array(temp)) acc2=accuracy_score(y_test,y_pred) mcc=matthews_corrcoef(y_test,y_pred) Recall=recall_score(y_test, y_pred,pos_label=1) Precision=precision_score(y_test, y_pred,pos_label=1) F1_score=f1_score(y_test, y_pred,pos_label=1) return auc,acc2,mcc,Recall,Precision,F1_score . # Train and print scores for each split for i in range(0,5): print(f&#39;Cross validation iteration: {i + 1}&#39;) X_train = X_train_list[i] X_valid = X_valid_list[i] y_train = y_train_list[i] y_valid = y_valid_list[i] auc,acc2,mcc,Recall,Precision,F1_score = train_rf(X_train, X_valid, y_train, y_valid, n_estimators=100, criterion=&#39;entropy&#39;, max_features=&#39;sqrt&#39;) print(f&#39;AUC score:{auc}&#39;) print(f&#39;Accuracy: {acc2}&#39;) print(f&#39;Matthews: {mcc}&#39;) print(f&#39;Recall: {Recall}&#39;) print(f&#39;Precision: {Precision}&#39;) print(f&#39;F1 score: {F1_score}&#39;) print() . Cross validation iteration: 1 AUC score:0.9887427620260744 Accuracy: 0.9730608453320948 Matthews: 0.8415714713449818 Recall: 0.8564356435643564 Precision: 0.8564356435643564 F1 score: 0.8564356435643564 Cross validation iteration: 2 AUC score:0.9876712143359863 Accuracy: 0.9781699953553181 Matthews: 0.8608807076715227 Recall: 0.8563829787234043 Precision: 0.8895027624309392 F1 score: 0.8726287262872627 Cross validation iteration: 3 AUC score:0.9909322903664254 Accuracy: 0.9712029725963771 Matthews: 0.8122047591950275 Recall: 0.8142076502732241 Precision: 0.8418079096045198 F1 score: 0.8277777777777778 Cross validation iteration: 4 AUC score:0.9754214676396435 Accuracy: 0.9693450998606595 Matthews: 0.8300350847464447 Recall: 0.7964601769911505 Precision: 0.9 F1 score: 0.8450704225352113 Cross validation iteration: 5 AUC score:0.9912994366040052 Accuracy: 0.9753717472118959 Matthews: 0.8390326671715927 Recall: 0.8406593406593407 Precision: 0.864406779661017 F1 score: 0.8523676880222841 .",
            "url": "https://drug-discovery.github.io/Drug-Discovery-blog/2021/04/24/1.0-Data_preparations.html",
            "relUrl": "/2021/04/24/1.0-Data_preparations.html",
            "date": " • Apr 24, 2021"
        }
        
    
  

  
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://drug-discovery.github.io/Drug-Discovery-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}